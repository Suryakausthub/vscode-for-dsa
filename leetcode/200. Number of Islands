#include <vector>

using namespace std;

class Solution {
public:
    void dfs(int i, int j, vector<vector<int>>& vis, vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vis[i][j] = 1;
        
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        
        for (auto dir : directions) {
            int newx = i + dir.first;
            int newy = j + dir.second;
            
            if (newx >= 0 && newx < m && newy >= 0 && newy < n && !vis[newx][newy] && grid[newx][newy] == '1') {
                dfs(newx, newy, vis, grid);  
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();         
        if (m == 0) return 0;        
        int n = grid[0].size();      
        int count = 0;               
        
        vector<vector<int>> vis(m, vector<int>(n, 0));
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !vis[i][j]) {
                    count++;  
                    dfs(i, j, vis, grid);  
                }
            }
        }
        
        return count;  
    }
};
