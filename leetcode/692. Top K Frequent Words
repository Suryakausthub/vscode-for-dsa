class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> freqMap;
        for (const auto &word : words) {
            freqMap[word]++;
        }

        auto comp = [](const pair<int, string>& a, const pair<int, string>& b) {
            if (a.first == b.first) return a.second < b.second;
            return a.first > b.first; 
        };
        priority_queue<pair<int, string>, vector<pair<int, string>>, decltype(comp)> minHeap(comp);

        for (const auto &it : freqMap) {
            minHeap.push({it.second, it.first});
            if (minHeap.size() > k) {
                minHeap.pop();
            }
        }

        vector<string> vec;
        while (minHeap.size() != 0) {
            vec.push_back(minHeap.top().second);
            minHeap.pop();
        }

        reverse(vec.begin(), vec.end());
        return vec;
    }
};
